情况一： 短时间内(hela 两个小时、非p2p一天)第一种情况只宕一次机. 理论上正常
ark路由：

10.67.128.15(port: 1、2、3)     10.67.128.16(4、5、6)   10.67.128.17(7、8、9)

10.67.128.17宕机 --> 10.67.128.16(4、5、6、7、8、9)

宕机列表：10.67.128.17

可用节点列表：10.67.128.16(4、5、6、7、8、9)

宕机前的clone：

pc1 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

pc2 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

pc2 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

宕机后第一批pc重试感知宕机然后后续pc更具 宕机列表、可用节点列表 直接替换

宕机列表、可用节点列表 还存在，这时再下发一批clone


pc1 {10.67.128.16 master 、 10.67.128.17 peer、 10.67.128.15 peer}

pc2 {10.67.128.16 master 、 10.67.128.17 peer、 10.67.128.15 peer}

pc2 {10.67.128.16 master 、 10.67.128.17 peer、 10.67.128.15 peer}

后续的clone任务节点没有在宕机列表里面，所以不会替换对应的路由，正常读ark





优先相信可用节点，如果某个节点重试就需要将该节点移除可用节点列表

情况二： 短时间内(hela 两个小时、非p2p一天)第二种情况只宕两次机(并且两次宕机时都被hela、fryer感知到). 
ark路由：

10.67.128.15(port: 1、2、3)     10.67.128.16(4、5、6)   10.67.128.17(7、8、9)

10.67.128.17宕机 --> 10.67.128.16(4、5、6、7、8、9)

宕机列表：10.67.128.17

可用节点列表：10.67.128.16(4、5、6、7、8、9)

宕机前的clone：

pc1 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

pc2 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

pc2 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

宕机后第一批pc重试感知宕机然后后续pc更具 宕机列表、可用节点列表 直接替换

宕机列表、可用节点列表 还存在，这时再下发一批clone


pc1 {10.67.128.16 master 、 10.67.128.17 peer、 10.67.128.15 peer}

pc2 {10.67.128.16 master 、 10.67.128.17 peer、 10.67.128.15 peer}

pc2 {10.67.128.16 master 、 10.67.128.17 peer、 10.67.128.15 peer}

后续的clone任务节点没有在宕机列表里面，所以不会替换对应的路由，正常读ark

再次宕机 10.67.128.16宕机 --> 10.67.128.17(4、5、6、7、8、9)


宕机列表：10.67.128.17（中间态） 

宕机列表：10.67.128.16

再发一批clone

pc1 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

pc2 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}

pc2 {10.67.128.17 master 、 10.67.128.16 peer、 10.67.128.15 peer}




ip port存放ark的ip、port关系

unordered_map[string]vector<int>