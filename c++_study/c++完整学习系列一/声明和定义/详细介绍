C++ 声明与定义的区别 ： 


一，声明与定义的区别

声明是将一个名称引入程序。定义提供了一个实体在程序中的唯一描述，涉及到内存空间的分配以及初始值的设定。声明和定义有时是同时存在的。

1，定义也是声明，extern声明不是定义，即不分配存储空间。


int a = 10;    //定义就是声明
extern int b;  //声明，不是定义
注意：如果使用extern关键字时，对变量进行了初始化，那就是定义。


extern int b = 20;  //是定义


2，下列情况下，声明仅仅是声明


1:  仅仅提供函数原型：void display();
2:  extern int a;
3:  class A;
4:  typedef 声明;
5:  在类中定义的静态数据成员的声明
例如：


class A{
public:
    static int a;  //声明
};

3，下列情况下，定义仅仅是定义


1:  在类定义之外，定义并初始化一个静态数据成员。如 int A::a = 0;
2:  在类外定义非内联成员函数。
 

二，内部链接与外部链接

在编译时，编译器只检测程序语法和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成目标文件。而在链接程序时，链接器会在所有的目标文件中找寻函数的实现。如果找不到，那到就会报链接错误码。链接把不同编译单元产生的符号联系起来。有两种链接方式：内部链接和外部链接。

1，内部链接：

如果一个符号名对于它的编译单元来说是局部的，并且在链接时不可能与其他编译单元中的同样的名称相冲突，那个这个符号就是内部链接。内部链接意味着对此符号的访问仅限于当前的编译单元中，对其他编译单元都是不可见的。



2，外部链接：

在一个多文件的程序中，如果一个符号在链接时可以和其他编译单元交互，那么这个名称就有外部链接。外部链接意味着该定义不仅仅局限在单个编译单元中。



3，函数与变量具有的连接性

全局变量、非内联成员函数、非内联函数、非静态自由函数都具有外部链接。

使用const、static关键字声明的函数或变量具有内部链接。



4，在头文件中可以包含的内容

声明仅仅是将一个符号引入到一个作用域。而定义提供了一个实体在程序中的唯一描述。在一个给定的作用域中重复声明一个符号是可以的，但是却不能重复定义，否则将会引起编译错误。



a， 将具有外部链接的定义放在头文件中几乎都是编程错误。因为如果该头文件中被多个源文件包含，那么就会存在多个定义，链接时就会出错。

b， 在头文件中放置内部链接的定义却是合法的，但不推荐使用的。因为头文件被包含到多个源文件中时，在每个编译单元中有自己的实体存在。大量消耗内存空间，还会影响机器性能。


原文链接：https://blog.csdn.net/cloud323/article/details/75646379



## 声明和定义

1.变量的定义：变量的定义用于为变量分配存储空间，还可以为变量指定初始值。在一个程序中，变量有且仅有一个定义。

2.变量的声明：用于向程序表明变量的类型和名字。程序中变量可以声明多次，但只能定义一次。

3.两者联系与区别：

（1）定义也是声明，因为当定义变量时我们也向程序表明了它的类型和名字；

（2）但声明不是定义，可以通过使用extern关键字声明变量而不定义它。不定义变量的声明包括对象名、对象类型和对象类型前的关键字extern；

例：

extern int i；//声明但不定义

int i;//声明也定义

extern声明不是定义，也不分配存储空间。事实上，它只是说明变量定义在程序的其他地方。

注意：如果声明有初始化式，那么它可被当作是定义，此时声明也是定义了，即使声明标记为extern，

           例如：extern double pi = 3.1416；//声明也定义，此句话虽然使用了extern，但是这条语句还是定义了pi，分配并初始化了存储空间。

注意：只有当extern声明位于函数外部时，才可以含有初始化式。

注意：因为初始化的extern声明已经是定义了，而变量在程序中只能定义一次，所以对该变量随后的任何定义都是错误的：

extern double pi = 3.1416；//定义了

double pi；//重定义，不合法

注意：在C++语言中，变量必须仅能定义一次，而且在使用变量之前必须定义或声明变量。

4.为什么需要区分声明和定义：

C++程序通常由许多文件组成。为了让多个文件访问相同的变量，C++区分了声明和定义。任何在多个文件中使用的变量都需要既有定义又有声明。在这种情况下，在一个文件中定义了变量，在其他使用改变了的文件中则只能包含变量的声明（不能再包含定义，因为变量只能定义一次）。

5.真正用的时候 这种需要被别的文件用的变量，必须在本文件中定义好，比如在文件1中定义extern int i=0；然后才可以再别的文件中使用，使用方式是：在类体的外部使用extern int i；这样在这个类中就可以使用该外部变量了，再次强调必须先定义好，才能再别的地方通过extern声明使用。例：

#include <QDebug>
#include "myclass.h"
int test_i;//定义 等同于 extern test_i =0;
MyClass::MyClass(QWidget *parent, Qt::WFlags flags)
 : QMainWindow(parent, flags)
{
 ui.setupUi(this);
 qDebug()<<test_i;
}

MyClass::~MyClass()
{
}
