
/root/udisk/scripts/rpc.py set_bdev_qos_limit --rw_ios_per_sec 0 --rw_mbytes_per_sec 2000 InnerUDisk-yu110frn
                                                             //开放iops为200000      带宽为2G


### linux 更新内核和测试

执行：mount ，可以看到很多挂载的信息

  vim /boot/efi/EFI/centos/grub.cfg     //内核启动配置文件，注意看内核版本

uname -a  可以看当前内核版本

停止watchdog拉起chunk，直接加一个后缀名字就可以了，没有修改metaserver的markoff_line，这样chunk就不会下线所以就不用修复

使用wget 将文件下载到要升级的机器上面，解压，然后执行install.sh脚本

然后重启

更改chunk配置，注意：rdma_addr配置项

创建大叶目录以及挂载



开始压测：

检测指标：  https://www.ucloud.cn/site/product/udisk.html



在宿主机申请虚机，然后升级为对应的配置信息16核32G，挂载需要测试集群里创建的盘，先去对应虚机上面执行命令：

​       盘改为对应大小自己的盘大小，盘的位置改为对应的，vdb还是vdc还是什么的  。 没有fio直接yum  install  fio安装即可  



测试带宽的命令： 测试带宽的，一般是多少M

fio -direct=1 -iodepth=16 -rw=randwrite -ioengine=libaio -bs=128k -size=300G -numjobs=64 -runtime=1000 -group_reporting -name=test -filename=/dev/vd*（对应盘）    *

* 测试iops的命令：    测试iops的，一般是多少k，k表示千，看iops就是每秒读写有多少次
* fio -direct=1 -iodepth=16 -rw=randread -ioengine=libaio -bs=4k -size=300G -numjobs=64 -runtime=1000 -group_reporting -name=test -filename=/dev/vd*（对应盘）   



登录盘对应宿主机，就是创建虚机的宿主机，进入目录/root/udisk/scripts， 执行脚本 python rpc.py set_bdev_qos_limit 对应udisk --rw_ios_per_sec 0 --rw_mbytes_per_sec 4800     在虚机内通过fio命令压测盘性能： 



 python rpc.py set_bdev_qos_limit 对应udisk --rw_ios_per_sec 0 --rw_mbytes_per_sec 4800 

python rpc.py  set_bdev_qos_limit  bsr-xyndy4wo --rw_ios_per_sec 0 --rw_mbytes_per_sec 4800   注意改对应的盘id   bsr-f5xubrp3 是5012的盘id  ，bsr-xyndy4wo是5011的                     1200000

bsr-f5xubrp3:  是盘uuid  其他的不变



然后去虚机上面长期压测：

 iostat -xmz 1  看带宽与iops

 nohup fio -direct=1 -iodepth=16 -rw=randread -ioengine=libaio -bs=4k -size=300G -numjobs=16 -time_based -runtime=10000000 -group_reporting -name=test -filename=/dev/vdb &

direct=1    ：表示不使用缓存

 -iodepth=16  ：表示一次提交要提交多少个I/O请求，不过这个只对异步I/O引擎有用

 -size=300G : 这里300表示你被测磁盘的大小

-numjobs=16     本次任务克隆的数量（线程/进程 执行相同的任务），默认值1

-group_reporting    关于显示结果的，汇总每个进程的信息





virsh  list看该宿主机上面的虚机个数，并且是已经开启的（应该是已经开启的虚机，后面的那个是唯一标识虚机的id信息）

![img](C:\Users\usser\AppData\Local\Temp\企业微信截图_15960289913566.png)









重启vhost_gate



fio网上找的参数详解

以随机读为例：
fio -ioengine=libaio -group_reporting -direct=1 -name=testsda -numjobs=1 --time_based --runtime=1800 -iodepth=64  -bs=512k -filename=/dev/sda

 nohup fio -direct=1 -iodepth=16  -ioengine=libaio -bs=4k -size=300G -numjobs=16 -time_based -runtime=10000000 -group_reporting -name=test -filename=/dev/vdb &

说明：
ioengine=libaio 　　 io引擎使用libaio方式，这个是异步的
group_reporting 　　关于显示结果的，汇总每个进程的信息
direct=1 　　　　　  测试过程绕过机器自带的buffer，使测试结果更真实
name=testsda 　　　指定job的名字
numjobs=1 　　　　              本次的测试线程为1
runtime=1800 　　  测试时间为1800秒
iodepth=64 　　　　              测试的IO深度，即每次会给磁盘的IO请求数
rw=randread 　　　 测试随机读的I/O
rw=read          测试顺序读的I/O
iodepth=64        测试的IO深度，即每次会给磁盘的IO请求数
bs=512k          单次io的块文件大小为512 k
filename=/dev/sda  指定被测试的盘符

 -time_based      如果设置的即使job已被完全读写或写完，也会执行完runtime规定的时间。它是通过循环执行相同的负载来实现的。加上这个参数可以防止job提前结束。








##################################

开放盘： InnerUDisk-ablynxcj 带宽和iops ：
//读写带宽为0  iops为20万  读带宽：800M   写带宽：1500M   读写带宽：0
/root/udisk/scripts/rpc.py set_bdev_qos_limit --rw_ios_per_sec 200000 --w_mbytes_per_sec 1500 --r_mbytes_per_sec 900 --rw_mbytes_per_sec 0 InnerUDisk-ablynxcj  

//查看设置结果
python rpc.py get_bdevs -b InnerUDisk-ablynxcj